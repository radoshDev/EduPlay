generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CreatureCategory {
  id            String     @id @default(cuid())
  title         String
  imageUrl      String
  slug          String     @unique
  description   String?
  descriptionUA String?
  sourceLink    String?
  creatures     Creature[]
}

model Creature {
  id            String           @id @default(cuid())
  media         String[]
  name          String
  description   String?
  descriptionUA String?
  category      CreatureCategory @relation(fields: [categorySlug], references: [slug])
  categorySlug  String
}

enum Difficulty {
  beginner
  easy
  normal
  hard
  expert
  ultra
}

model Student {
  id               String     @id @default(cuid())
  name             String
  avatar           String
  creatureCategory String     @default("all")
  level            Difficulty @default(normal)
  user             User       @relation(fields: [userId], references: [id])
  userId           String
}

model TaskCategory {
  id            String            @id @default(cuid())
  title         String
  imageUrl      String
  slug          String            @unique
  subCategories TaskSubCategory[]
}

model TaskSubCategory {
  id             String       @id @default(cuid())
  title          String
  imageUrl       String
  slug           String       @unique
  parentCategory TaskCategory @relation(fields: [parentSlug], references: [slug])
  parentSlug     String
  tasks          Task[]
}

model Task {
  id              String          @id @default(cuid())
  value           String          @unique
  result          String?
  subcategory     TaskSubCategory @relation(fields: [subcategorySlug], references: [slug])
  subcategorySlug String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  password          String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
}

enum Role {
  user
  admin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(user)
  accounts      Account[]
  students      Student[]
}
